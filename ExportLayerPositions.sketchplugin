// -*- javascript -*-
// Sketch Layer Positions (ctrl alt command f)

#import 'sandbox.js'
#import 'sandbox-sketch-utils.js'

function processLayers(layers, layoutName) {
  var lines = [];
  lines.push("#include <pq_ui/layout.h>");
  lines.push("");
  lines.push("static const pq_ui::fixed_layout " + layoutName + "({");
  for (var i = 0; i < [layers count]; ++i) {
    var layer = [layers objectAtIndex:i];
    var frame = [layer frame];
    var name = '"' + [layer name] + '"';
    var elems = [name, frame.x(), frame.y(), frame.width(), frame.height()];
    var line = "    { " + elems.join(", ") + " },"
    lines.push(line);
  }
  lines.push("});")
  return lines.join("\n");
}

function saveStringToFile(string, fileName) {
  var path = [@"" stringByAppendingString:fileName];
  var str = [@"" stringByAppendingString:string];
  var parent = [path stringByDeletingLastPathComponent];
  function writeData() {
    var error = MOPointer.alloc().init();
    [str writeToFile:path atomically:false encoding:NSUTF8StringEncoding error:error];
    if (error.value()) {
      log("error writing file: " + error.value());
    }
  }
  if (in_sandbox()) {
    sandboxAccess.accessFilePath_withBlock_persistPermission(parent, writeData, true);
  } else {
    writeData();
  }   
  log("saved to " + fileName);
}

var show_errors = true;
var docPath = [[doc fileURL] path].split([doc displayName])[0];
var docName = [doc displayName].replace(".sketch","");
var outPath = docPath + docName + ".h";
var layers = [[doc currentPage] layers];
var string = processLayers(layers, docName);
saveStringToFile(string, outPath);

