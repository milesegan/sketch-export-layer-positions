// -*- javascript -*-
// Sketch Layer Positions (ctrl alt command f)

#import 'sandbox.js'
#import 'sandbox-sketch-utils.js'

function isArtboard(layer) {
  return [layer isKindOfClass:[MSArtboardGroup class]];
}

function isGroup(layer) {
  return [layer isKindOfClass:[MSLayerGroup class]];
}

function processLayers(layers, layoutName) {
  log(layers);
  var lines = [];
  lines.push("#include <pq_ui/layout_item.h>");
  lines.push("");
  lines.push("static const layout_item " + layoutName + "_layout[] = {");
  for (var i = 0; i < layers.length; ++i) {
    var layer = layers[i];
    var name = '"' + layer.name + '"';
    var elems = [name, layer.x, layer.y, layer.width, layer.height];
    var line = "    { " + elems.join(", ") + " },"
    lines.push(line);
  }
  lines.push("    { NULL, 0, 0, 0, 0 }");
  lines.push("};")
  lines.push("");
  return lines.join("\n");
}

function saveStringToFile(string, fileName) {
  var path = [@"" stringByAppendingString:fileName];
  var str = [@"" stringByAppendingString:string];
  var parent = [path stringByDeletingLastPathComponent];
  function writeData() {
    var error = MOPointer.alloc().init();
    [str writeToFile:path atomically:false encoding:NSUTF8StringEncoding error:error];
    if (error.value()) {
      log("error writing file: " + error.value());
    }
  }
  if (in_sandbox()) {
    sandboxAccess.accessFilePath_withBlock_persistPermission(parent, writeData, true);
  } else {
    writeData();
  }   
  log("saved to " + fileName);
}

function walkSublayers(layer, callback, x, y) {
  var layers = [layer layers];
  for (var i = 0; i < [layers count]; ++i) {
    var layer = [layers objectAtIndex:i];
    var frame = [layer frame];
    var dict = {
      name: [layer name],
      x: frame.x() + x,
      y: frame.y() + y,
      width: frame.width(),
      height: frame.height()
    };
    callback(dict);
    if (isGroup(layer)) {
      walkSublayers(layer, callback, dict.x, dict.y);
    }
  }
}

function shouldExportLayer(layer) {
  var prefixes = ["button_", "knob_", "control_"];
  var n = layer.name;
  for (var i = 0; i < prefixes.length; ++i) {
    if (layer.name.hasPrefix(prefixes[i])) return true;
  }
  return false;
}

function main() {
  var show_errors = true;
  var docPath = [[doc fileURL] path].split([doc displayName])[0];
  var artboards = [[doc currentPage] artboards];
  for (var i = 0; i < [artboards count]; ++i) {
    var layerList = [];
    function accumulateLayer(l) {
      if (shouldExportLayer(l)) layerList.push(l)
    }
    var layer = [artboards objectAtIndex:i];
    log([layer frame]);
    walkSublayers(layer, accumulateLayer, 0, 0);
    var docName = [layer name];
    var outPath = docPath + docName + ".h";
    var string = processLayers(layerList, docName);
    saveStringToFile(string, outPath);
  }
}

main();
  
